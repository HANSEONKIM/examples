package kr.or.ddit.basic;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

public class T09_FileEncodingTest {
	public static void main(String[] args) throws FileNotFoundException {
		//파일 인코딩을 이용하여 읽어오기
		//InputStreamReader => 바이트기반 스트림을 문자기반 스트림으로 변환해주는 보조 스트림
		
		FileInputStream fin = null;
		
		InputStreamReader isr = null;
		
		try {
			
			/*
			   FileInputStream객체를 생성한 후 이 객체를 매개변수로 받는 InputStreamReader객체를 생성한다.
			    (바이트 입력 스트림에 연결되어 문자를 입력 스트림인 Reader로 변환시키는 보조 스트림) 
			  
			 */
//			fin = new FileInputStream("d:/D_Other/test_ansi.txt");
			fin = new FileInputStream("d:/D_Other/test_utf8.txt");
			
			/*
			  InputStreamReader 객체는 파일의 인코딩 방식을 지정할 수 있다.
			  	형식) new InputStreamReader(바이트 기반스트림객체, 인코딩방식);
			  	
			  	인코딩 방식
			  	 한글 인코딩 방식은 크게 두가지로 나뉜다.(UTF-8 과 EUC-KR)
			  	 원래 한글우니도우는 CP949방식을 사용했는데, 윈도우를 개발한 마이크로소프트에서 EUC-KR
			  	 방식에서 확장 하였기 때문에 MS949라고도 부른다.
			  	 한글 Window의 메모장에서 이야기하는 ANSI인코딩이란, CP949(Code Page 949)를 말함.
			  	 
			  	 - MS949 => 윈도우의 기본 한글 인코딩 방식(ANSI계열)
			  	 - UTF-8 => 유니콛 UFT-8 인코딩 방식(영문자 및 숫차 : 1byte, 한글 3byte) =>가변적
			  	 
			  	 ANSI는 영어를 표기하기 위해 만든 코드로 규격 자체에 한글이 없었다가 나중에 여기에 EUC-KR, CP949 이라는 식으로 한글이 포함 됨.
			  	 
			  	 참고)
			  	 * ASCII => extended ASCII(ISO 8859-1) 
			  	  		=> 조합형(초성,중성,종성), 완성형(KSC 5601)
			  	  		=> 윈도우계열 : CP949(확장 완성형)
			  	  		    유닉스계열 : EUC-KR(확장 유닉스 코드)
			  	  		=> 유니코드(Unicode)
		
				* KSC5601
				한글 완성형 표준(한글 2,350자 표현)
				한국공업표준 정보처리분야(C)의 5601번 표준안 
				
				* KSC 5636
				영문자에 대한 표준
				한국공업표준 정보처리분야(C)의 5636번 표준안 
				기존 ASCII Code에서 역슬래쉬(\)를 원표시로 대체함
				
				* EUC-KR
				 Bell 연구소에서 유닉스 상에서 영문자 이외의 문자를 지원하기 위해 제안한 확장 유닉스 코드
				  (Extended UNIX Code)중 한글 인코딩 방식
				  영문은 KSC5636로 처리하고 한글은 KSC5601로 처리.
				  EUC-KR = KSC5601(한글) + KSC5636(영문)
				  
				* 유니코드(Unicode)
				  서로다른 문자 인코딩을 사용하는 컴퓨터간의 문서교환에 어려움을 겪게 되고,
				  이런 문제점을 해결하기 위해 전 세계의 모든 문자를 하나의 통일된 문자집합(CharSet)으로 표현함.
				  처음엔 2byte(65536)로 표현했지만, 부족해지자 21bit(약 200만 문자)로 확장되었다.
				  => 보충문자(supplementary character)
			 */
			
			isr = new InputStreamReader(fin,"utf-8");
			
			int c;
			while((c=isr.read()) != -1) {
				System.out.print((char)c);
			}
			System.out.println();
			System.out.println("출력끝...");
			
			isr.close();//보조 스트림만 닫아도 된다.
			
		}catch(IOException e ) {
			e.printStackTrace();
		}
	}
}
